#pragma once

#include <stdint.h>

#ifndef _H_CELESTIAL_KEYWORD
#define _H_CELESTIAL_KEYWORD

namespace celestial
{
	using namespace std;

	enum class celestial_token: uint64_t
	{
		token_eof				   ,

		token_and                  ,
		token_as                   ,
		token_atomic               ,
		token_auto                 ,
		token_bitand               ,
		token_bitor                ,
		token_bitnot               ,
		token_bool                 ,
		token_break                ,
		token_byte                 ,
		token_case                 ,
		token_catch                ,
		token_char                 ,
		token_char8                ,
		token_char16               ,
		token_char32               ,
		token_class                ,
		token_concept              ,
		token_continue             ,
		token_const                ,
		token_coroutine            ,
		token_default              ,
		token_delete               ,
		token_do                   ,
		token_enum                 ,
		token_export               ,
		token_explicit             ,
		token_extern               ,
		token_else                 ,
		token_false                ,
		token_final                ,
		token_float32              ,
		token_float64              ,
		token_float128             ,
		token_for                  ,
		token_foreach              ,
		token_fragment             ,
		token_friend               ,
		token_if                   ,
		token_import               ,
		token_implicit             ,
		token_in                   ,
		token_inline               ,
		token_inspect              ,
		token_int4                 ,
		token_int8                 ,
		token_int16                ,
		token_int32                ,
		token_int64                ,
		token_int128               ,
		token_is                   ,
		token_meta                 ,
		token_module               ,
		token_mutable              ,
		token_namespace            ,
		token_not                  ,
		token_null                 ,
		token_nullptr              ,
		token_operator             ,
		token_or                   ,
		token_override             ,
		token_package              ,
		token_ptr                  ,
		token_private              ,
		token_protected            ,
		token_public               ,
		token_ref                  ,
		token_register             ,
		token_requires             ,
		token_return               ,
		token_self                 ,
		token_switch               ,
		token_synchronized         ,
		token_true                 ,
		token_try                  ,
		token_type                 ,
		token_unsafe_ptr           ,
		token_uint8                ,
		token_uint16               ,
		token_uint32               ,
		token_uint64               ,
		token_uint128              ,
		token_until                ,
		token_using                ,
		token_var                  ,
		token_virtual              ,
		token_void                 ,
		token_wchar                ,
		token_while                ,

		token_identifier		   ,
		token_number			   ,
	};
}

#endif // !_H_CELESTIAL_KEYWORD
